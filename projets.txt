POO && compilation: OK.
SGBD:
PARTIE BASE DE DONNEES:
1.Création de la base:
base.sql
donnees.sql
supprimer_base.sql: supprime aussi les triggers, les procédures et les types.
------------------------
2.Les procédures, les triggers et les fonctions:
fonctions.sql
procedures.sql
execute_procedures.sql
triggers.sql (garantissent l'integrité de la base de donnees)
---------------------------------
3.Les vues:
vues.sql
vues_consultation.sql
vues_statistiques.sql
-----------------------------------------
4.Les starts:

    start.sql : Permet d'initialiser la base, les vues, les triggers, et les procédures.
    start_default.sql : Même chose que pour start.sql mais en ajoutant les données de donnees.sql dans la base.
    start_tests_checks.sql: Permet de démarer les tests sur les checks.
    start_tests_fonctions.sql: Permet de démarer les tests sur les fonctions.
    start_tests_procedures.sql: Permet de démarer les tests sur les procédures.
    start_tests_triggers.sql: Permet de démarer les tests sur les triggers.

5.Les affichages:



    aff_vues_c: Permet d'afficher les différentes vues présentes dans vues_consultation.sql.
    aff_vues_s: Permet d'afficher les différentes vues présentes dans vues_statistiques.sql.
    affichage.sql: Permet d'afficher les différentes tables de la base.


6.Les tests:

    tests_checks.sql : Contient les tests concernant les checks.
    tests_fonctions.sql: t Contient les tests concernant les fonctions.
    tests_procedures.sql : Contient les tests concernant les procédures.
    tests_triggers.sql : Contient les tests concernant les triggers.



Remarque:
dans execute_procedures.sql:

-- ============================================================
-- !!!!!! VOUS DEVEZ EXECUTER CES FICHIERS AVANT:
-- !!!!!!           - base.sql
-- !!!!!!           - vues.sql
-- !!!!!!           - procedures.sql
-- ============================================================
-- Pour l'affichage des dbms_output.put_line
set serveroutput on;

-- ============================================================
--                procedure_livraison_un_foyer
-- ============================================================

-- Les livraisons 3 et 4 devraient ressortir car aucun foyer n'y participe et qu'elles auront lieu demain
EXECUTE procedure_livraison_un_foyer

-- ============================================================
--                procedure_livraison_contrat
-- ============================================================

-- La livraison 2 devrait apparaître car aucune livraison n'y est rattachée
EXECUTE procedure_livraison_contrat

rollback;
voilà en gros ce fichier d'execute_procedures de type PL/SQL.
=>Il peut contenir des appels(executions grace a @) de certains fichiers PL/SQL AUTRES ( --).
(comme les fichiers de la section start).

La meme chose pour affichage presque avec des INSERT INTO parfois en cas de vues puis rollback pour ne pas tenir en compte de cela.



De meme pour la partie de test, des insert into puis appel a des fonctions dont le retour est une table, procedures de meme (effet de bord), triggers aussi avec des insert into qui ne marchent pas puis un rollback pour tout.

ET
VOILA. FIN_SQL_TPs.
Resume de celui-la:
a-index/analyze index ?? validate structure/select BTREE_SPACE from INDEX_STATS where NAME='??';
(exemple de création:
create index PRENOM_IDX on ACTEUR(PRENOM_ACTEUR);)
b-
explain plan set STATEMENT_ID='req1' for 
requete a ecrire ''''.
&&:->
select STATEMENT_ID, OPERATION, OPTIONS, ID ,PARENT_ID, POSITION, OBJECT_NAME from PLAN_TABLE;
toujours a retenir ces 7:
statement_id, operation, options, id, parent_id, position, object_name.(7 colonnes)
Rq: changement largeur colonne (pas agrandir):
column options format a10
SQL> /
retour a la ligne car largeur colonne dépassée pour options en format normal par défaut.
c-
desc USER_TABLES
PUIS entree sans ;.
2/Afficher la liste des noms de notre table:
select TABLE_NAME from USER_TABLES;
3/statiques pour une table (dressage) :
analyze table ACTEUR compute statictics;
4/afficher pour cette derniere, le nombre de ligne, la taille mémoire, la taille de chaque ligne, le nombre de blocs de la table:
select NUM_ROWS, AVG_SPACE, AVG_ROW_LEN, BLOCKS from USER_TABLES where TABLE_NAME='ACTEUR';
BLOCKS est bel et bien =à 5.
copier-coller car il faudrait le retenir COMME CA.
